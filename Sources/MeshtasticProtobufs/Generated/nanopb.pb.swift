// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: nanopb.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Custom options for defining:
// - Maximum size of string/bytes
// - Maximum number of elements in array
//
// These are used by nanopb to generate statically allocable structures
// for memory-limited environments.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum FieldType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {

  /// Automatically decide field type, generate static field if possible.
  case ftDefault = 0

  /// Always generate a callback field.
  case ftCallback = 1

  /// Always generate a dynamically allocated field.
  case ftPointer = 4

  /// Generate a static field or raise an exception if not possible.
  case ftStatic = 2

  /// Ignore the field completely.
  case ftIgnore = 3

  /// Legacy option, use the separate 'fixed_length' option instead
  case ftInline = 5

  init() {
    self = .ftDefault
  }

}

enum IntSize: Int, SwiftProtobuf.Enum, Swift.CaseIterable {

  /// Default, 32/64bit based on type in .proto
  case isDefault = 0
  case is8 = 8
  case is16 = 16
  case is32 = 32
  case is64 = 64

  init() {
    self = .isDefault
  }

}

enum TypenameMangling: Int, SwiftProtobuf.Enum, Swift.CaseIterable {

  /// Default, no typename mangling
  case mNone = 0

  /// Strip current package name
  case mStripPackage = 1

  /// Only use last path component
  case mFlatten = 2

  /// Replace the package name by the initials
  case mPackageInitials = 3

  init() {
    self = .mNone
  }

}

enum DescriptorSize: Int, SwiftProtobuf.Enum, Swift.CaseIterable {

  /// Select minimal size based on field type
  case dsAuto = 0

  /// 1 word; up to 15 byte fields, no arrays
  case ds1 = 1

  /// 2 words; up to 4095 byte fields, 4095 entry arrays
  case ds2 = 2

  /// 4 words; up to 2^32-1 byte fields, 2^16-1 entry arrays
  case ds4 = 4

  /// 8 words; up to 2^32-1 entry arrays
  case ds8 = 8

  init() {
    self = .dsAuto
  }

}

/// This is the inner options message, which basically defines options for
/// a field. When it is used in message or file scope, it applies to all
/// fields.
struct NanoPBOptions: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Allocated size for 'bytes' and 'string' fields.
  /// For string fields, this should include the space for null terminator.
  var maxSize: Int32 {
    get {return _storage._maxSize ?? 0}
    set {_uniqueStorage()._maxSize = newValue}
  }
  /// Returns true if `maxSize` has been explicitly set.
  var hasMaxSize: Bool {return _storage._maxSize != nil}
  /// Clears the value of `maxSize`. Subsequent reads from it will return its default value.
  mutating func clearMaxSize() {_uniqueStorage()._maxSize = nil}

  /// Maximum length for 'string' fields. Setting this is equivalent
  /// to setting max_size to a value of length+1.
  var maxLength: Int32 {
    get {return _storage._maxLength ?? 0}
    set {_uniqueStorage()._maxLength = newValue}
  }
  /// Returns true if `maxLength` has been explicitly set.
  var hasMaxLength: Bool {return _storage._maxLength != nil}
  /// Clears the value of `maxLength`. Subsequent reads from it will return its default value.
  mutating func clearMaxLength() {_uniqueStorage()._maxLength = nil}

  /// Allocated number of entries in arrays ('repeated' fields)
  var maxCount: Int32 {
    get {return _storage._maxCount ?? 0}
    set {_uniqueStorage()._maxCount = newValue}
  }
  /// Returns true if `maxCount` has been explicitly set.
  var hasMaxCount: Bool {return _storage._maxCount != nil}
  /// Clears the value of `maxCount`. Subsequent reads from it will return its default value.
  mutating func clearMaxCount() {_uniqueStorage()._maxCount = nil}

  /// Size of integer fields. Can save some memory if you don't need
  /// full 32 bits for the value.
  var intSize: IntSize {
    get {return _storage._intSize ?? .isDefault}
    set {_uniqueStorage()._intSize = newValue}
  }
  /// Returns true if `intSize` has been explicitly set.
  var hasIntSize: Bool {return _storage._intSize != nil}
  /// Clears the value of `intSize`. Subsequent reads from it will return its default value.
  mutating func clearIntSize() {_uniqueStorage()._intSize = nil}

  /// Force type of field (callback or static allocation)
  var type: FieldType {
    get {return _storage._type ?? .ftDefault}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  /// Use long names for enums, i.e. EnumName_EnumValue.
  var longNames: Bool {
    get {return _storage._longNames ?? true}
    set {_uniqueStorage()._longNames = newValue}
  }
  /// Returns true if `longNames` has been explicitly set.
  var hasLongNames: Bool {return _storage._longNames != nil}
  /// Clears the value of `longNames`. Subsequent reads from it will return its default value.
  mutating func clearLongNames() {_uniqueStorage()._longNames = nil}

  /// Add 'packed' attribute to generated structs.
  /// Note: this cannot be used on CPUs that break on unaligned
  /// accesses to variables.
  var packedStruct: Bool {
    get {return _storage._packedStruct ?? false}
    set {_uniqueStorage()._packedStruct = newValue}
  }
  /// Returns true if `packedStruct` has been explicitly set.
  var hasPackedStruct: Bool {return _storage._packedStruct != nil}
  /// Clears the value of `packedStruct`. Subsequent reads from it will return its default value.
  mutating func clearPackedStruct() {_uniqueStorage()._packedStruct = nil}

  /// Add 'packed' attribute to generated enums.
  var packedEnum: Bool {
    get {return _storage._packedEnum ?? false}
    set {_uniqueStorage()._packedEnum = newValue}
  }
  /// Returns true if `packedEnum` has been explicitly set.
  var hasPackedEnum: Bool {return _storage._packedEnum != nil}
  /// Clears the value of `packedEnum`. Subsequent reads from it will return its default value.
  mutating func clearPackedEnum() {_uniqueStorage()._packedEnum = nil}

  /// Skip this message
  var skipMessage: Bool {
    get {return _storage._skipMessage ?? false}
    set {_uniqueStorage()._skipMessage = newValue}
  }
  /// Returns true if `skipMessage` has been explicitly set.
  var hasSkipMessage: Bool {return _storage._skipMessage != nil}
  /// Clears the value of `skipMessage`. Subsequent reads from it will return its default value.
  mutating func clearSkipMessage() {_uniqueStorage()._skipMessage = nil}

  /// Generate oneof fields as normal optional fields instead of union.
  var noUnions: Bool {
    get {return _storage._noUnions ?? false}
    set {_uniqueStorage()._noUnions = newValue}
  }
  /// Returns true if `noUnions` has been explicitly set.
  var hasNoUnions: Bool {return _storage._noUnions != nil}
  /// Clears the value of `noUnions`. Subsequent reads from it will return its default value.
  mutating func clearNoUnions() {_uniqueStorage()._noUnions = nil}

  /// integer type tag for a message
  var msgid: UInt32 {
    get {return _storage._msgid ?? 0}
    set {_uniqueStorage()._msgid = newValue}
  }
  /// Returns true if `msgid` has been explicitly set.
  var hasMsgid: Bool {return _storage._msgid != nil}
  /// Clears the value of `msgid`. Subsequent reads from it will return its default value.
  mutating func clearMsgid() {_uniqueStorage()._msgid = nil}

  /// decode oneof as anonymous union
  var anonymousOneof: Bool {
    get {return _storage._anonymousOneof ?? false}
    set {_uniqueStorage()._anonymousOneof = newValue}
  }
  /// Returns true if `anonymousOneof` has been explicitly set.
  var hasAnonymousOneof: Bool {return _storage._anonymousOneof != nil}
  /// Clears the value of `anonymousOneof`. Subsequent reads from it will return its default value.
  mutating func clearAnonymousOneof() {_uniqueStorage()._anonymousOneof = nil}

  /// Proto3 singular field does not generate a "has_" flag
  var proto3: Bool {
    get {return _storage._proto3 ?? false}
    set {_uniqueStorage()._proto3 = newValue}
  }
  /// Returns true if `proto3` has been explicitly set.
  var hasProto3: Bool {return _storage._proto3 != nil}
  /// Clears the value of `proto3`. Subsequent reads from it will return its default value.
  mutating func clearProto3() {_uniqueStorage()._proto3 = nil}

  /// Force proto3 messages to have no "has_" flag.
  /// This was default behavior until nanopb-0.4.0.
  var proto3SingularMsgs: Bool {
    get {return _storage._proto3SingularMsgs ?? false}
    set {_uniqueStorage()._proto3SingularMsgs = newValue}
  }
  /// Returns true if `proto3SingularMsgs` has been explicitly set.
  var hasProto3SingularMsgs: Bool {return _storage._proto3SingularMsgs != nil}
  /// Clears the value of `proto3SingularMsgs`. Subsequent reads from it will return its default value.
  mutating func clearProto3SingularMsgs() {_uniqueStorage()._proto3SingularMsgs = nil}

  /// Generate an enum->string mapping function (can take up lots of space).
  var enumToString: Bool {
    get {return _storage._enumToString ?? false}
    set {_uniqueStorage()._enumToString = newValue}
  }
  /// Returns true if `enumToString` has been explicitly set.
  var hasEnumToString: Bool {return _storage._enumToString != nil}
  /// Clears the value of `enumToString`. Subsequent reads from it will return its default value.
  mutating func clearEnumToString() {_uniqueStorage()._enumToString = nil}

  /// Generate bytes arrays with fixed length
  var fixedLength: Bool {
    get {return _storage._fixedLength ?? false}
    set {_uniqueStorage()._fixedLength = newValue}
  }
  /// Returns true if `fixedLength` has been explicitly set.
  var hasFixedLength: Bool {return _storage._fixedLength != nil}
  /// Clears the value of `fixedLength`. Subsequent reads from it will return its default value.
  mutating func clearFixedLength() {_uniqueStorage()._fixedLength = nil}

  /// Generate repeated field with fixed count
  var fixedCount: Bool {
    get {return _storage._fixedCount ?? false}
    set {_uniqueStorage()._fixedCount = newValue}
  }
  /// Returns true if `fixedCount` has been explicitly set.
  var hasFixedCount: Bool {return _storage._fixedCount != nil}
  /// Clears the value of `fixedCount`. Subsequent reads from it will return its default value.
  mutating func clearFixedCount() {_uniqueStorage()._fixedCount = nil}

  /// Generate message-level callback that is called before decoding submessages.
  /// This can be used to set callback fields for submsgs inside oneofs.
  var submsgCallback: Bool {
    get {return _storage._submsgCallback ?? false}
    set {_uniqueStorage()._submsgCallback = newValue}
  }
  /// Returns true if `submsgCallback` has been explicitly set.
  var hasSubmsgCallback: Bool {return _storage._submsgCallback != nil}
  /// Clears the value of `submsgCallback`. Subsequent reads from it will return its default value.
  mutating func clearSubmsgCallback() {_uniqueStorage()._submsgCallback = nil}

  /// Shorten or remove package names from type names.
  /// This option applies only on the file level.
  var mangleNames: TypenameMangling {
    get {return _storage._mangleNames ?? .mNone}
    set {_uniqueStorage()._mangleNames = newValue}
  }
  /// Returns true if `mangleNames` has been explicitly set.
  var hasMangleNames: Bool {return _storage._mangleNames != nil}
  /// Clears the value of `mangleNames`. Subsequent reads from it will return its default value.
  mutating func clearMangleNames() {_uniqueStorage()._mangleNames = nil}

  /// Data type for storage associated with callback fields.
  var callbackDatatype: String {
    get {return _storage._callbackDatatype ?? "pb_callback_t"}
    set {_uniqueStorage()._callbackDatatype = newValue}
  }
  /// Returns true if `callbackDatatype` has been explicitly set.
  var hasCallbackDatatype: Bool {return _storage._callbackDatatype != nil}
  /// Clears the value of `callbackDatatype`. Subsequent reads from it will return its default value.
  mutating func clearCallbackDatatype() {_uniqueStorage()._callbackDatatype = nil}

  /// Callback function used for encoding and decoding.
  /// Prior to nanopb-0.4.0, the callback was specified in per-field pb_callback_t
  /// structure. This is still supported, but does not work inside e.g. oneof or pointer
  /// fields. Instead, a new method allows specifying a per-message callback that
  /// will be called for all callback fields in a message type.
  var callbackFunction: String {
    get {return _storage._callbackFunction ?? "pb_default_field_callback"}
    set {_uniqueStorage()._callbackFunction = newValue}
  }
  /// Returns true if `callbackFunction` has been explicitly set.
  var hasCallbackFunction: Bool {return _storage._callbackFunction != nil}
  /// Clears the value of `callbackFunction`. Subsequent reads from it will return its default value.
  mutating func clearCallbackFunction() {_uniqueStorage()._callbackFunction = nil}

  /// Select the size of field descriptors. This option has to be defined
  /// for the whole message, not per-field. Usually automatic selection is
  /// ok, but if it results in compilation errors you can increase the field
  /// size here.
  var descriptorsize: DescriptorSize {
    get {return _storage._descriptorsize ?? .dsAuto}
    set {_uniqueStorage()._descriptorsize = newValue}
  }
  /// Returns true if `descriptorsize` has been explicitly set.
  var hasDescriptorsize: Bool {return _storage._descriptorsize != nil}
  /// Clears the value of `descriptorsize`. Subsequent reads from it will return its default value.
  mutating func clearDescriptorsize() {_uniqueStorage()._descriptorsize = nil}

  /// Set default value for has_ fields.
  var defaultHas: Bool {
    get {return _storage._defaultHas ?? false}
    set {_uniqueStorage()._defaultHas = newValue}
  }
  /// Returns true if `defaultHas` has been explicitly set.
  var hasDefaultHas: Bool {return _storage._defaultHas != nil}
  /// Clears the value of `defaultHas`. Subsequent reads from it will return its default value.
  mutating func clearDefaultHas() {_uniqueStorage()._defaultHas = nil}

  /// Extra files to include in generated `.pb.h`
  var include: [String] {
    get {return _storage._include}
    set {_uniqueStorage()._include = newValue}
  }

  /// Automatic includes to exclude from generated `.pb.h`
  /// Same as nanopb_generator.py command line flag -x.
  var exclude: [String] {
    get {return _storage._exclude}
    set {_uniqueStorage()._exclude = newValue}
  }

  /// Package name that applies only for nanopb.
  var package: String {
    get {return _storage._package ?? String()}
    set {_uniqueStorage()._package = newValue}
  }
  /// Returns true if `package` has been explicitly set.
  var hasPackage: Bool {return _storage._package != nil}
  /// Clears the value of `package`. Subsequent reads from it will return its default value.
  mutating func clearPackage() {_uniqueStorage()._package = nil}

  /// Override type of the field in generated C code. Only to be used with related field types
  var typeOverride: SwiftProtobuf.Google_Protobuf_FieldDescriptorProto.TypeEnum {
    get {return _storage._typeOverride ?? .double}
    set {_uniqueStorage()._typeOverride = newValue}
  }
  /// Returns true if `typeOverride` has been explicitly set.
  var hasTypeOverride: Bool {return _storage._typeOverride != nil}
  /// Clears the value of `typeOverride`. Subsequent reads from it will return its default value.
  mutating func clearTypeOverride() {_uniqueStorage()._typeOverride = nil}

  /// Due to historical reasons, nanopb orders fields in structs by their tag number
  /// instead of the order in .proto. Set this to false to keep the .proto order.
  /// The default value will probably change to false in nanopb-0.5.0.
  var sortByTag: Bool {
    get {return _storage._sortByTag ?? true}
    set {_uniqueStorage()._sortByTag = newValue}
  }
  /// Returns true if `sortByTag` has been explicitly set.
  var hasSortByTag: Bool {return _storage._sortByTag != nil}
  /// Clears the value of `sortByTag`. Subsequent reads from it will return its default value.
  mutating func clearSortByTag() {_uniqueStorage()._sortByTag = nil}

  /// Set the FT_DEFAULT field conversion strategy.
  /// A field that can become a static member of a c struct (e.g. int, bool, etc)
  /// will be a a static field.
  /// Fields with dynamic length are converted to either a pointer or a callback.
  var fallbackType: FieldType {
    get {return _storage._fallbackType ?? .ftCallback}
    set {_uniqueStorage()._fallbackType = newValue}
  }
  /// Returns true if `fallbackType` has been explicitly set.
  var hasFallbackType: Bool {return _storage._fallbackType != nil}
  /// Clears the value of `fallbackType`. Subsequent reads from it will return its default value.
  mutating func clearFallbackType() {_uniqueStorage()._fallbackType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Extension support defined in nanopb.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_EnumOptions {

  var nanopbEnumopt: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb_enumopt) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb_enumopt, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb_enumopt`
  /// has been explicitly set.
  var hasNanopbEnumopt: Bool {
    return hasExtensionValue(ext: Extensions_nanopb_enumopt)
  }
  /// Clears the value of extension `Extensions_nanopb_enumopt`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopbEnumopt() {
    clearExtensionValue(ext: Extensions_nanopb_enumopt)
  }
}

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  var nanopb: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb`
  /// has been explicitly set.
  var hasNanopb: Bool {
    return hasExtensionValue(ext: Extensions_nanopb)
  }
  /// Clears the value of extension `Extensions_nanopb`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopb() {
    clearExtensionValue(ext: Extensions_nanopb)
  }
}

extension SwiftProtobuf.Google_Protobuf_FileOptions {

  var nanopbFileopt: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb_fileopt) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb_fileopt, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb_fileopt`
  /// has been explicitly set.
  var hasNanopbFileopt: Bool {
    return hasExtensionValue(ext: Extensions_nanopb_fileopt)
  }
  /// Clears the value of extension `Extensions_nanopb_fileopt`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopbFileopt() {
    clearExtensionValue(ext: Extensions_nanopb_fileopt)
  }
}

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  var nanopbMsgopt: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb_msgopt) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb_msgopt, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb_msgopt`
  /// has been explicitly set.
  var hasNanopbMsgopt: Bool {
    return hasExtensionValue(ext: Extensions_nanopb_msgopt)
  }
  /// Clears the value of extension `Extensions_nanopb_msgopt`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopbMsgopt() {
    clearExtensionValue(ext: Extensions_nanopb_msgopt)
  }

}

// MARK: - File's ExtensionMap: Nanopb_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Nanopb_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Extensions_nanopb_fileopt,
  Extensions_nanopb_msgopt,
  Extensions_nanopb_enumopt,
  Extensions_nanopb
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let Extensions_nanopb_fileopt = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb_fileopt"
)

let Extensions_nanopb_msgopt = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb_msgopt"
)

let Extensions_nanopb_enumopt = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, SwiftProtobuf.Google_Protobuf_EnumOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb_enumopt"
)

let Extensions_nanopb = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension FieldType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FT_DEFAULT"),
    1: .same(proto: "FT_CALLBACK"),
    2: .same(proto: "FT_STATIC"),
    3: .same(proto: "FT_IGNORE"),
    4: .same(proto: "FT_POINTER"),
    5: .same(proto: "FT_INLINE"),
  ]
}

extension IntSize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IS_DEFAULT"),
    8: .same(proto: "IS_8"),
    16: .same(proto: "IS_16"),
    32: .same(proto: "IS_32"),
    64: .same(proto: "IS_64"),
  ]
}

extension TypenameMangling: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "M_NONE"),
    1: .same(proto: "M_STRIP_PACKAGE"),
    2: .same(proto: "M_FLATTEN"),
    3: .same(proto: "M_PACKAGE_INITIALS"),
  ]
}

extension DescriptorSize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DS_AUTO"),
    1: .same(proto: "DS_1"),
    2: .same(proto: "DS_2"),
    4: .same(proto: "DS_4"),
    8: .same(proto: "DS_8"),
  ]
}

extension NanoPBOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NanoPBOptions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_size"),
    14: .standard(proto: "max_length"),
    2: .standard(proto: "max_count"),
    7: .standard(proto: "int_size"),
    3: .same(proto: "type"),
    4: .standard(proto: "long_names"),
    5: .standard(proto: "packed_struct"),
    10: .standard(proto: "packed_enum"),
    6: .standard(proto: "skip_message"),
    8: .standard(proto: "no_unions"),
    9: .same(proto: "msgid"),
    11: .standard(proto: "anonymous_oneof"),
    12: .same(proto: "proto3"),
    21: .standard(proto: "proto3_singular_msgs"),
    13: .standard(proto: "enum_to_string"),
    15: .standard(proto: "fixed_length"),
    16: .standard(proto: "fixed_count"),
    22: .standard(proto: "submsg_callback"),
    17: .standard(proto: "mangle_names"),
    18: .standard(proto: "callback_datatype"),
    19: .standard(proto: "callback_function"),
    20: .same(proto: "descriptorsize"),
    23: .standard(proto: "default_has"),
    24: .same(proto: "include"),
    26: .same(proto: "exclude"),
    25: .same(proto: "package"),
    27: .standard(proto: "type_override"),
    28: .standard(proto: "sort_by_tag"),
    29: .standard(proto: "fallback_type"),
  ]

  fileprivate class _StorageClass {
    var _maxSize: Int32? = nil
    var _maxLength: Int32? = nil
    var _maxCount: Int32? = nil
    var _intSize: IntSize? = nil
    var _type: FieldType? = nil
    var _longNames: Bool? = nil
    var _packedStruct: Bool? = nil
    var _packedEnum: Bool? = nil
    var _skipMessage: Bool? = nil
    var _noUnions: Bool? = nil
    var _msgid: UInt32? = nil
    var _anonymousOneof: Bool? = nil
    var _proto3: Bool? = nil
    var _proto3SingularMsgs: Bool? = nil
    var _enumToString: Bool? = nil
    var _fixedLength: Bool? = nil
    var _fixedCount: Bool? = nil
    var _submsgCallback: Bool? = nil
    var _mangleNames: TypenameMangling? = nil
    var _callbackDatatype: String? = nil
    var _callbackFunction: String? = nil
    var _descriptorsize: DescriptorSize? = nil
    var _defaultHas: Bool? = nil
    var _include: [String] = []
    var _exclude: [String] = []
    var _package: String? = nil
    var _typeOverride: SwiftProtobuf.Google_Protobuf_FieldDescriptorProto.TypeEnum? = nil
    var _sortByTag: Bool? = nil
    var _fallbackType: FieldType? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _maxSize = source._maxSize
      _maxLength = source._maxLength
      _maxCount = source._maxCount
      _intSize = source._intSize
      _type = source._type
      _longNames = source._longNames
      _packedStruct = source._packedStruct
      _packedEnum = source._packedEnum
      _skipMessage = source._skipMessage
      _noUnions = source._noUnions
      _msgid = source._msgid
      _anonymousOneof = source._anonymousOneof
      _proto3 = source._proto3
      _proto3SingularMsgs = source._proto3SingularMsgs
      _enumToString = source._enumToString
      _fixedLength = source._fixedLength
      _fixedCount = source._fixedCount
      _submsgCallback = source._submsgCallback
      _mangleNames = source._mangleNames
      _callbackDatatype = source._callbackDatatype
      _callbackFunction = source._callbackFunction
      _descriptorsize = source._descriptorsize
      _defaultHas = source._defaultHas
      _include = source._include
      _exclude = source._exclude
      _package = source._package
      _typeOverride = source._typeOverride
      _sortByTag = source._sortByTag
      _fallbackType = source._fallbackType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._maxSize) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._maxCount) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._longNames) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._packedStruct) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._skipMessage) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._intSize) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._noUnions) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._msgid) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._packedEnum) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._anonymousOneof) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._proto3) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._enumToString) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._maxLength) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._fixedLength) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._fixedCount) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._mangleNames) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._callbackDatatype) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._callbackFunction) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._descriptorsize) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._proto3SingularMsgs) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._submsgCallback) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._defaultHas) }()
        case 24: try { try decoder.decodeRepeatedStringField(value: &_storage._include) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._package) }()
        case 26: try { try decoder.decodeRepeatedStringField(value: &_storage._exclude) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._typeOverride) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._sortByTag) }()
        case 29: try { try decoder.decodeSingularEnumField(value: &_storage._fallbackType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._maxSize {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._maxCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._longNames {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._packedStruct {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._skipMessage {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._intSize {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._noUnions {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._msgid {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._packedEnum {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._anonymousOneof {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._proto3 {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._enumToString {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._maxLength {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._fixedLength {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._fixedCount {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._mangleNames {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._callbackDatatype {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._callbackFunction {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._descriptorsize {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._proto3SingularMsgs {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._submsgCallback {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._defaultHas {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      if !_storage._include.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._include, fieldNumber: 24)
      }
      try { if let v = _storage._package {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      if !_storage._exclude.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._exclude, fieldNumber: 26)
      }
      try { if let v = _storage._typeOverride {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._sortByTag {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._fallbackType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 29)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NanoPBOptions, rhs: NanoPBOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._maxSize != rhs_storage._maxSize {return false}
        if _storage._maxLength != rhs_storage._maxLength {return false}
        if _storage._maxCount != rhs_storage._maxCount {return false}
        if _storage._intSize != rhs_storage._intSize {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._longNames != rhs_storage._longNames {return false}
        if _storage._packedStruct != rhs_storage._packedStruct {return false}
        if _storage._packedEnum != rhs_storage._packedEnum {return false}
        if _storage._skipMessage != rhs_storage._skipMessage {return false}
        if _storage._noUnions != rhs_storage._noUnions {return false}
        if _storage._msgid != rhs_storage._msgid {return false}
        if _storage._anonymousOneof != rhs_storage._anonymousOneof {return false}
        if _storage._proto3 != rhs_storage._proto3 {return false}
        if _storage._proto3SingularMsgs != rhs_storage._proto3SingularMsgs {return false}
        if _storage._enumToString != rhs_storage._enumToString {return false}
        if _storage._fixedLength != rhs_storage._fixedLength {return false}
        if _storage._fixedCount != rhs_storage._fixedCount {return false}
        if _storage._submsgCallback != rhs_storage._submsgCallback {return false}
        if _storage._mangleNames != rhs_storage._mangleNames {return false}
        if _storage._callbackDatatype != rhs_storage._callbackDatatype {return false}
        if _storage._callbackFunction != rhs_storage._callbackFunction {return false}
        if _storage._descriptorsize != rhs_storage._descriptorsize {return false}
        if _storage._defaultHas != rhs_storage._defaultHas {return false}
        if _storage._include != rhs_storage._include {return false}
        if _storage._exclude != rhs_storage._exclude {return false}
        if _storage._package != rhs_storage._package {return false}
        if _storage._typeOverride != rhs_storage._typeOverride {return false}
        if _storage._sortByTag != rhs_storage._sortByTag {return false}
        if _storage._fallbackType != rhs_storage._fallbackType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
